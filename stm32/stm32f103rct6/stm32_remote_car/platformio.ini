; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env:genericSTM32F103RC]
platform = ststm32
board = genericSTM32F103RC
framework = stm32cube

; 编译选项
build_flags = 
    -DSTM32F103xE
    -DUSE_HAL_DRIVER
    -DHSE_VALUE=8000000L

build_src_filter = 
    +<*>
    -<uart2_string_echo.cpp>
    -<bt_ble_usart_sniffer.cpp>
    

; 调试和烧录配置
; debug_tool = stlink
; upload_protocol = stlink
upload_protocol = serial
upload_port = COM6

; 串口上传配置 - DTR/RTS 控制时序
; 说明：DTR 低电平复位，RTS 高电平进 bootloader
; 时序：DTR=0(复位) → RTS=1(进bootloader) → DTR=1(退出复位) → RTS=0(正常运行)
upload_flags = 
    -R
    -i
    -dtr,rts,dtr:-rts

; 串口监视器配置
monitor_speed = 115200
monitor_port = COM6
monitor_dtr = 1                 ; 监视器打开时 DTR 保持高电平（不复位）
monitor_rts = 0                 ; 监视器打开时 RTS 保持低电平（不进bootloader）

; 库依赖
lib_deps = 
    ; 如果需要额外库可以在这里添加

; 源文件过滤 (可选)
; src_filter = +<*> -<.git/> -<.svn/>

[env:bt_debug]
platform = ststm32
board = genericSTM32F103RC
framework = stm32cube
build_flags = 
    -DSTM32F103xE
    -DUSE_HAL_DRIVER
    -DHSE_VALUE=8000000L
upload_protocol = serial
upload_port = COM6
monitor_speed = 115200
monitor_port = COM6
monitor_dtr = 1
monitor_rts = 0
; 仅编译蓝牙调试测试文件
build_src_filter = 
    -<*>
    +<uart2_string_echo.cpp>
    +<usart.c>
    +<stm32f1xx_it.cpp>
    +<gpio.c>

upload_flags = 
    -R
    -i
    -dtr,rts,dtr:-rts

; 额外的包含路径 (如果需要)
; build_unflags = -Os
; build_flags = -O2
